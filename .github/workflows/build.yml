name: TrollShell Full Build

on:
  workflow_dispatch:

jobs:
  build-trollshell:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup cache key from tool versions
        id: cache-key
        run: |
          echo "cache-key=$(date +%s)-$(sha256sum tool-versions.txt | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - name: Restore tool-cache
        uses: actions/cache@v3
        with:
          path: tools-cache
          key: ${{ steps.cache-key.outputs['cache-key'] }}

      - name: Install host build dependencies
        run: |
          sudo apt update
          sudo apt install -y zip unzip curl git python3 python3-pip xz-utils ar

      - name: Download and prepare tools (only on cache miss)
        if: steps.cache-key.outputs['cache-hit'] != 'true'
        run: |
          source tool-versions.txt
          mkdir -p tools-cache/bin

          # dpkg
          curl -sLO "http://ftp.de.debian.org/debian/pool/main/d/dpkg/dpkg_${dpkg}_amd64.deb"
          ar x dpkg_${dpkg}_amd64.deb
          tar -xf data.tar.xz
          cp usr/bin/dpkg usr/bin/dpkg-deb tools-cache/bin/

          # apt-get
          curl -sLO "http://ftp.de.debian.org/debian/pool/main/a/apt/apt_${apt-get}_amd64.deb"
          ar x apt_${apt-get}_amd64.deb
          tar -xf data.tar.xz
          cp usr/bin/apt-get tools-cache/bin/

          # clang
          curl -sLO "https://github.com/llvm/llvm-project/releases/download/llvmorg-${clang}/clang+llvm-${clang}-x86_64-linux-gnu-ubuntu-20.04.tar.xz"
          tar -xf clang+llvm-${clang}-x86_64-linux-gnu-ubuntu-20.04.tar.xz
          cp clang+llvm-${clang}-x86_64-linux-gnu-ubuntu-20.04/bin/clang clang++ tools-cache/bin/

          # gcc
          curl -sLO "https://ftp.gnu.org/gnu/gcc/gcc-${gcc}/gcc-${gcc}-x86_64-linux-gnu.tar.xz"
          tar -xf gcc-${gcc}-x86_64-linux-gnu.tar.xz
          cp gcc-${gcc}-x86_64-linux-gnu/bin/gcc g++ tools-cache/bin/

          # python3
          curl -sLO "https://www.python.org/ftp/python/${python3}/Python-${python3}.tgz"
          tar -xf Python-${python3}.tgz
          cp Python-${python3}/python tools-cache/bin/python3

          # ldid
          curl -sLO "https://github.com/ProcursusTeam/ldid/releases/download/${ldid}/ldid"
          chmod +x ldid
          mv ldid tools-cache/bin/

          # make
          curl -sLO "https://ftp.gnu.org/gnu/make/make-${make}.tar.gz"
          tar -xf make-${make}.tar.gz
          cd make-${make}
          ./configure --prefix=$(pwd)/install
          make && make install
          cp install/bin/make ../tools-cache/bin/
          cd ..

          # tar
          curl -sLO "https://ftp.gnu.org/gnu/tar/tar-${tar}.tar.gz"
          tar -xf tar-${tar}.tar.gz
          cd tar-${tar}
          ./configure --prefix=$(pwd)/install
          make && make install
          cp install/bin/tar ../tools-cache/bin/
          cd ..

      - name: Save tool-cache
        if: steps.cache-key.outputs['cache-hit'] != 'true'
        uses: actions/cache@v3
        with:
          path: tools-cache
          key: ${{ steps.cache-key.outputs['cache-key'] }}

      - name: Install pip packages
        run: |
          tools-cache/bin/python3 -m ensurepip
          tools-cache/bin/python3 -m pip install --upgrade pip
          tools-cache/bin/python3 -m pip install \
            beautifulsoup4 requests tqdm lxml ebooklib readability-lxml fastapi typer

      - name: Create entitlements.plist
        run: |
          cat <<EOF > entitlements.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>get-task-allow</key><true/>
            <key>platform-application</key><true/>
            <key>com.apple.private.security.no-sandbox</key><true/>
            <key>com.apple.private.security.no-container</key><true/>
            <key>com.apple.private.skip-library-validation</key><true/>
            <key>com.apple.private.security.cs-developer</key><true/>
            <key>com.apple.private.persona-mgmt</key><true/>
            <key>com.apple.private.shell</key><true/>
            <key>com.apple.private.tcc.allow-all</key><true/>
            <key>com.apple.private.io.mount</key><true/>
            <key>com.apple.private.mobile_installation</key><true/>
            <key>com.apple.private.security.storage.AppDataContainers</key><true/>
            <key>com.apple.private.installation.apple</key><true/>
            <key>com.apple.private.mobile_container_manager</key><true/>
            <key>com.apple.private.all_XPC</key><true/>
          </dict></plist>
          EOF

      - name: Prepare enriched IPA
        run: |
          curl -sL "$(jq -r '.assets[] | select(.name|test("a-Shell.*\\.ipa$")) | .browser_download_url' \
            <(curl -s https://api.github.com/repos/holzschu/a-shell/releases/latest))" -o a-shell.ipa
          unzip -q a-shell.ipa -d original
          mv tools-cache original/Payload/a-Shell.app/tools
          cp original/Payload/a-Shell.app/a-ShellRunner original/Payload/a-Shell.app/a-Shell
          for bin in original/Payload/a-Shell.app/a-Shell tools-cache/bin/*; do
            tools-cache/bin/ldid -S entitlements.plist "$bin"
          done
          cd original && zip -qr ../troll-shell.ipa Payload

      - name: Create tools archive
        run: tar czvf tools.tar.gz -C original/Payload/a-Shell.app tools

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: troll-shell-full
          path: |
            troll-shell.ipa
            tools.tar.gz

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "trollshell-${{ github.run_number }}"
          files: |
            troll-shell.ipa
            tools.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
