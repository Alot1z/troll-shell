name: TrollShell Full Build

on:
  workflow_dispatch:

env:
  TOOL_VERSIONS_FILE: tool-versions.txt
  CACHE_DIR: tools-cache

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Read tool versions
        id: read_versions
        shell: bash
        run: |
          echo "Reading versions from $TOOL_VERSIONS_FILE"
          source $TOOL_VERSIONS_FILE
          echo "dpkg_version=$dpkg_version" >> $GITHUB_OUTPUT
          echo "apt_version=$apt_version" >> $GITHUB_OUTPUT
          echo "clang_version=$clang_version" >> $GITHUB_OUTPUT
          echo "gcc_version=$gcc_version" >> $GITHUB_OUTPUT
          echo "python_version=$python_version" >> $GITHUB_OUTPUT
          echo "ldid_version=$ldid_version" >> $GITHUB_OUTPUT
          echo "make_version=$make_version" >> $GITHUB_OUTPUT
          echo "tar_version=$tar_version" >> $GITHUB_OUTPUT

      - name: Setup cache directory
        run: mkdir -p $CACHE_DIR/bin

      - name: Cache downloaded tools
        uses: actions/cache@v3
        id: cache-tools
        with:
          path: $CACHE_DIR
          key: ${{ runner.os }}-tools-${{ steps.read_versions.outputs.dpkg_version }}-${{ steps.read_versions.outputs.apt_version }}-${{ steps.read_versions.outputs.clang_version }}-${{ steps.read_versions.outputs.gcc_version }}-${{ steps.read_versions.outputs.python_version }}-${{ steps.read_versions.outputs.ldid_version }}-${{ steps.read_versions.outputs.make_version }}-${{ steps.read_versions.outputs.tar_version }}-v2

      - name: Install essential dependencies
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          sudo apt update
          sudo apt install -y curl git python3 python3-pip xz-utils

      - name: Install Python build dependencies
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          sudo apt install -y libxml2-dev libxslt-dev libssl-dev zlib1g-dev libffi-dev || true

      - name: Download and setup binutils
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          curl -LO https://ftp.gnu.org/gnu/binutils/binutils-2.40.tar.gz
          tar -xf binutils-2.40.tar.gz
          cd binutils-2.40
          ./configure --prefix=/usr
          make -j$(nproc)
          sudo make install
          cd ..
          rm -rf binutils-2.40*

      - name: Download and extract dpkg tools
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          sudo apt update
          mkdir temp_dpkg
          cd temp_dpkg
          apt download dpkg
          ar x *.deb
          tar -xf data.tar.xz
          cp ./usr/bin/dpkg ../$CACHE_DIR/bin/
          cp ./usr/bin/dpkg-deb ../$CACHE_DIR/bin/
          cd ..
          rm -rf temp_dpkg

      - name: Download and extract apt tools
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          sudo apt update
          mkdir temp_apt
          cd temp_apt
          apt download apt
          ar x *.deb
          tar -xf data.tar.xz
          cp ./usr/bin/apt-get ../$CACHE_DIR/bin/
          cd ..
          rm -rf temp_apt

      - name: Parallel download tools
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          download_clang() {
            curl -LO https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ steps.read_versions.outputs.clang_version }}/clang+llvm-${{ steps.read_versions.outputs.clang_version }}-x86_64-linux-gnu-ubuntu-20.04.tar.xz &
          }
          download_gcc() {
            curl -LO https://ftp.gnu.org/gnu/gcc/gcc-${{ steps.read_versions.outputs.gcc_version }}/gcc-${{ steps.read_versions.outputs.gcc_version }}-x86_64-linux-gnu.tar.xz &
          }
          download_python() {
            curl -LO https://www.python.org/ftp/python/${{ steps.read_versions.outputs.python_version }}/Python-${{ steps.read_versions.outputs.python_version }}.tgz &
          }
          download_clang
          download_gcc
          download_python
          wait

      - name: Download clang binary release
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          tar -xf clang+llvm-${{ steps.read_versions.outputs.clang_version }}-x86_64-linux-gnu-ubuntu-20.04.tar.xz
          cp clang+llvm-${{ steps.read_versions.outputs.clang_version }}-x86_64-linux-gnu-ubuntu-20.04/bin/clang $CACHE_DIR/bin/
          cp clang+llvm-${{ steps.read_versions.outputs.clang_version }}-x86_64-linux-gnu-ubuntu-20.04/bin/clang++ $CACHE_DIR/bin/
          rm -rf clang+llvm-${{ steps.read_versions.outputs.clang_version }}-x86_64-linux-gnu-ubuntu-20.04.tar.xz clang+llvm-${{ steps.read_versions.outputs.clang_version }}-x86_64-linux-gnu-ubuntu-20.04

      - name: Download GCC binary release
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          tar -xf gcc-${{ steps.read_versions.outputs.gcc_version }}-x86_64-linux-gnu.tar.xz
          cp gcc-${{ steps.read_versions.outputs.gcc_version }}-x86_64-linux-gnu/bin/gcc $CACHE_DIR/bin/
          cp gcc-${{ steps.read_versions.outputs.gcc_version }}-x86_64-linux-gnu/bin/g++ $CACHE_DIR/bin/
          rm -rf gcc-${{ steps.read_versions.outputs.gcc_version }}-x86_64-linux-gnu.tar.xz gcc-${{ steps.read_versions.outputs.gcc_version }}-x86_64-linux-gnu

      - name: Download Python3 source and build
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          tar -xf Python-${{ steps.read_versions.outputs.python_version }}.tgz
          cd Python-${{ steps.read_versions.outputs.python_version }}
          CFLAGS="-I/usr/include/libxml2" ./configure --prefix=$PWD/install --with-ensurepip=install --enable-optimizations \
                     --with-system-ffi --with-system-expat --enable-loadable-sqlite-extensions \
                     --enable-ipv6 --with-dbmliborder=bdb:gdbm --with-system-libmpdec
          make -j$(nproc)
          make install
          cp install/bin/python3 ../$CACHE_DIR/bin/python3
          cd ..
          rm -rf Python-${{ steps.read_versions.outputs.python_version }}.tgz Python-${{ steps.read_versions.outputs.python_version }}

      - name: Setup pip for python3 and install packages
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          $CACHE_DIR/bin/python3 -m ensurepip
          $CACHE_DIR/bin/python3 -m pip install --upgrade pip
          $CACHE_DIR/bin/python3 -m pip install --no-cache-dir beautifulsoup4 requests tqdm lxml ebooklib readability-lxml fastapi typer wget

      - name: Download ldid directly
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid
          chmod +x ldid
          sudo mv ldid /usr/local/bin/

      - name: Download and build make
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          MAKE_ARCHIVE=make-${{ steps.read_versions.outputs.make_version }}.tar.gz
          curl -LO https://ftp.gnu.org/gnu/make/$MAKE_ARCHIVE
          tar -xf $MAKE_ARCHIVE
          cd make-${{ steps.read_versions.outputs.make_version }}
          ./configure --prefix=$PWD/install
          make -j$(nproc)
          make install
          cp install/bin/make ../../$CACHE_DIR/bin/
          cd ..
          rm -rf $MAKE_ARCHIVE make-${{ steps.read_versions.outputs.make_version }}

      - name: Download and build tar
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          TAR_ARCHIVE=tar-${{ steps.read_versions.outputs.tar_version }}.tar.gz
          curl -LO https://ftp.gnu.org/gnu/tar/$TAR_ARCHIVE
          tar -xf $TAR_ARCHIVE
          cd tar-${{ steps.read_versions.outputs.tar_version }}
          ./configure --prefix=$PWD/install
          make -j$(nproc)
          make install
          cp install/bin/tar ../../$CACHE_DIR/bin/
          cd ..
          rm -rf $TAR_ARCHIVE tar-${{ steps.read_versions.outputs.tar_version }}

      - name: Set execute permissions
        run: chmod +x $CACHE_DIR/bin/*

      - name: Prepare a-Shell app directory
        run: |
          mkdir -p a-shell/tools/bin
          cp -r $CACHE_DIR/bin/* a-shell/tools/bin/ || echo "Some binaries might be missing"

      - name: Download original a-Shell IPA
        run: |
          curl -LO https://github.com/holzschu/a-shell/releases/download/v0.99/a-shell-v0.99.ipa

      - name: Unzip a-Shell IPA
        run: unzip -o a-shell-v0.99.ipa -d a-shell-ipa

      - name: Copy tools into app bundle
        run: cp -r a-shell/tools/* a-shell-ipa/Payload/a-shell.app/tools/

      - name: Create entitlements.plist
        run: |
          cat <<EOF > entitlements.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>get-task-allow</key><true/>
            <key>platform-application</key><true/>
            <key>com.apple.private.security.no-sandbox</key><true/>
            <key>com.apple.private.security.no-container</key><true/>
          </dict>
          </plist>
          EOF

      - name: Sign all binaries and app
        run: |
          for bin in a-shell-ipa/Payload/a-shell.app/tools/bin/* a-shell-ipa/Payload/a-shell.app/a-shell; do
            ldid -Sentitlements.plist "$bin"
          done

      - name: Repack IPA
        run: |
          cd a-shell-ipa
          zip -r ../troll-shell.ipa *

      - name: Upload troll-shell IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: troll-shell.ipa
          path: troll-shell.ipa
