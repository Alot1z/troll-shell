name: TrollShell Caching Full Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup cache for tools
        uses: actions/cache@v3
        with:
          path: tools-cache
          key: tools-${{ runner.os }}-${{ hashFiles('tool-versions.txt') }}
          restore-keys: |
            tools-${{ runner.os }}-

      - name: Ensure tools-cache exists
        run: mkdir -p tools-cache/bin

      - name: Install host dependencies
        run: |
          sudo apt update
          sudo apt install -y zip unzip curl python3 python3-pip ar xz-utils build-essential

      - name: Download dpkg tools if needed
        if: ! (exists('tools-cache/bin/dpkg'))
        run: |
          curl -L -o tools-cache/dpkg.deb "http://ftp.de.debian.org/debian/pool/main/d/dpkg/dpkg_1.20.9_amd64.deb"
          ar x tools-cache/dpkg.deb --output tools-cache/
          tar -xf tools-cache/data.tar.xz -C tools-cache/
          cp tools-cache/usr/bin/dpkg tools-cache/bin/
          cp tools-cache/usr/bin/dpkg-deb tools-cache/bin/

      - name: Download apt-get if needed
        if: ! (exists('tools-cache/bin/apt-get'))
        run: |
          curl -L -o tools-cache/apt.deb "http://ftp.de.debian.org/debian/pool/main/a/apt/apt_1.8.2.1_amd64.deb"
          ar x tools-cache/apt.deb --output tools-cache/
          tar -xf tools-cache/data.tar.xz -C tools-cache/
          cp tools-cache/usr/bin/apt-get tools-cache/bin/

      - name: Download clang if needed
        if: ! (exists('tools-cache/bin/clang'))
        run: |
          curl -L -o tools-cache/clang.tar.xz "https://github.com/llvm/llvm-project/releases/download/llvmorg-16.0.0/clang+llvm-16.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz"
          mkdir -p tools-cache/clang
          tar -xf tools-cache/clang.tar.xz -C tools-cache/clang
          cp tools-cache/clang/bin/clang tools-cache/bin/
          cp tools-cache/clang/bin/clang++ tools-cache/bin/

      - name: Download gcc if needed
        if: ! (exists('tools-cache/bin/gcc'))
        run: |
          curl -L -o tools-cache/gcc.tar.xz "https://ftp.gnu.org/gnu/gcc/gcc-12.2.0/gcc-12.2.0-x86_64-linux-gnu.tar.xz"
          mkdir -p tools-cache/gcc
          tar -xf tools-cache/gcc.tar.xz -C tools-cache/gcc
          cp tools-cache/gcc/bin/gcc tools-cache/bin/
          cp tools-cache/gcc/bin/g++ tools-cache/bin/

      - name: Download Python3 if needed
        if: ! (exists('tools-cache/bin/python3'))
        run: |
          curl -L -o tools-cache/python3.tgz "https://www.python.org/ftp/python/3.10.7/Python-3.10.7.tgz"
          mkdir -p tools-cache/python3
          tar -xf tools-cache/python3.tgz -C tools-cache/python3
          cp tools-cache/python3/python tools-cache/bin/python3

      - name: Download ldid
        if: ! (exists('tools-cache/bin/ldid'))
        run: |
          curl -L -o tools-cache/bin/ldid "https://github.com/ProcursusTeam/ldid/releases/download/2.1.3/ldid"
          chmod +x tools-cache/bin/ldid

      - name: Build make if needed
        if: ! (exists('tools-cache/bin/make'))
        run: |
          curl -L -o tools-cache/make.tar.gz "https://ftp.gnu.org/gnu/make/make-4.3.tar.gz"
          mkdir -p tools-cache/make && tar -xf tools-cache/make.tar.gz -C tools-cache/make
          cd tools-cache/make/make-4.3
          ./configure --prefix=$PWD/install
          make && make install
          cp install/bin/make ../../bin/

      - name: Build tar if needed
        if: ! (exists('tools-cache/bin/tar'))
        run: |
          curl -L -o tools-cache/tar.tar.gz "https://ftp.gnu.org/gnu/tar/tar-1.34.tar.gz"
          mkdir -p tools-cache/tar && tar -xf tools-cache/tar.tar.gz -C tools-cache/tar
          cd tools-cache/tar/tar-1.34
          ./configure --prefix=$PWD/install
          make && make install
          cp install/bin/tar ../../bin/

      - name: Cache updated tools
        uses: actions/cache@v3
        with:
          path: tools-cache
          key: tools-${{ runner.os }}-${{ hashFiles('tool-versions.txt') }}

      - name: Clone a‑Shell and prepare payload
        run: |
          git clone https://github.com/holzschu/a-shell.git
          mkdir -p Payload/a-Shell.app/tools/bin
          cp tools-cache/bin/* Payload/a-Shell.app/tools/bin/

      - name: Setup pip in payload
        run: |
          cd Payload/a-Shell.app/tools/bin
          ./python3 -m ensurepip
          ./python3 -m pip install --upgrade pip
          ./python3 -m pip install beautifulsoup4 requests tqdm lxml ebooklib readability-lxml fastapi typer

      - name: Create entitlements.plist
        run: |
          cat <<EOF > entitlements.plist
          ... (samme entitlements som før) ...
          EOF

      - name: Sign all executables
        run: |
          find Payload/a-Shell.app/tools/bin -type f -exec tools-cache/bin/ldid -S entitlements.plist {} \;
          tools-cache/bin/ldid -S entitlements.plist Payload/a-Shell.app/a-ShellRunner

      - name: Package IPA
        run: |
          zip -r troll-shell.ipa Payload

      - name: Upload IPA + tools folder link
        uses: actions/upload-artifact@v4
        with:
          name: trollshell
          path: |
            troll-shell.ipa
            tools-cache

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            troll-shell.ipa
            tools-cache/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
